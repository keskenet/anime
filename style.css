/* Загальні стилі для коректного відображення */
body {
    margin: 0;
    overflow: hidden; /* Приховуємо скролл, коли стартовий екран активний */
}

/* Стилі для стартового екрану */
#splash-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000; /* Чорний фон для стартового екрану */
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 2.5em;
    z-index: 1000; /* Перекриває всі інші елементи */
    opacity: 1; /* Початкова непрозорість (повністю видимий) */
    transition: opacity 1s ease-out; /* Плавний перехід при зникненні */
}

#splash-screen.hidden {
    opacity: 0; /* Робить його прозорим */
    visibility: hidden; /* Приховує його, щоб він не реагував на події */
    pointer-events: none; /* Запобігає взаємодії з прихованим елементом */
}

#splash-screen p {
    font-size: 0.5em;
    margin-top: 15px;
}

/* Стилі для основного вмісту */
.main-content {
    display: none; /* Спочатку прихований */
    opacity: 0; /* Початкова непрозорість для плавного появи */
    transition: opacity 1s ease-in; /* Плавний перехід при появі */
    width: 100vw;
    height: 100vh;
    background-image: url('https://i.ibb.co/jnTDj6L/Chat-GPT-Image-24-2025-14-12-26.png'); /* Нове посилання на фон */
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    color: rgb(0, 255, 85); /* Колір тексту, щоб він був видимим на фоні */
    /* Важливо: приберіть display: flex та пов'язані властивості тут,
       якщо ви хочете, щоб контент всередині .main-content
       керувався своїми власними стилями позиціонування (наприклад, .frame-2) */
    /* Якщо ви хочете, щоб весь .main-content був flex-контейнером, залиште їх. */
    /* Але тоді .frame-2 та .image-column будуть розташовані за правилами flexbox. */
    /* Для цього прикладу я залишу їх, щоб продемонструвати центрування. */
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column; /* Змінив на column, щоб елементи йшли один під одним */
    text-align: center;
}

.main-content.visible {
    display: flex; /* Показуємо як flexbox */
    opacity: 1; /* Робить його повністю непрозорим */
}

/* Стилі для вашого нового блоку .frame-2 */
.frame-2,
.frame-2 * {
    box-sizing: border-box;
}
.frame-2 {
    width: 309px;
    height: 109px;
    position: relative;
    /* Можливо, тобі потрібно буде налаштувати позицію .frame-2
       відносно .main-content, якщо він flex-контейнер */
    margin-bottom: 20px; /* Додав трохи відступу, якщо .main-content - column */
}
.rectangle-19 {
    background: #64140d;
    border-radius: 30px;
    width: 307px;
    height: 109px;
    position: absolute;
    left: 0px;
    top: 0px;
}
.div-text { /* Змінив назву класу, щоб уникнути конфлікту */
    color: #bc2d1f;
    text-align: left;
    /* Важливо: переконайся, що шрифт "InknutAntiqua-SemiBold" підключений,
       інакше буде використано стандартний sans-serif */
    font-family: "InknutAntiqua-SemiBold", sans-serif;
    font-size: 44px;
    font-weight: 600;
    position: absolute;
    left: 85px;
    top: 0px;
    width: 222px;
    height: 25px; /* Можливо, потрібно буде збільшити висоту, щоб вміст помістився */
    /* Додав line-height для центрування тексту, якщо він не поміщається */
    line-height: 109px; 
}
.image-12 {
    width: 68px;
    height: 64px;
    position: absolute;
    left: 12px;
    top: 22px;
    object-fit: cover;
    aspect-ratio: 68/64; /* Встановлено aspect-ratio */
}

/* Стилі для image-column та editable-image */
.image-column {
    /* Якщо .main-content є flex-контейнером, то absolute positioning може конфліктувати з flexbox. */
    /* Тому краще використовувати звичайний потік або flex-box властивості. */
    /* Якщо ти хочеш, щоб .image-column був десь у конкретному місці,
       тоді .main-content не повинен бути display: flex. */
    /* Або .image-column має бути position: relative всередині flex-контейнера,
       і потім внутрішні елементи можна позиціонувати absolute. */
    /* Для цього прикладу я приберу absolute positioning,
       щоб він був частиною flex-потоку .main-content. */
    /* Якщо тобі потрібне absolute positioning, дай знати, і ми налаштуємо. */
    /* position: absolute; */ /* Закоментовано */
    /* top: 0; */             /* Закоментовано */
    /* left: 0; */            /* Закоментовано */

    /* Задайте ширину/висоту колонки за потреби */
    width: 327px;
    height: 109px;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    z-index: 10;
    background: transparent;
    margin-top: 20px; /* Додав трохи відступу від .frame-2 */
}

.editable-image {
    width: 100%; /* Розмір картинки залежить від ширини .image-column */
    height: auto;
    max-width: 100%;
    border-radius: 8px;
    /* Можна додати box-shadow або border за бажанням */
}